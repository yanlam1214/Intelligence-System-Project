window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "schnapsen", "modulename": "schnapsen", "kind": "module", "doc": "<p>A package for implementing bots playing the Schnapsen card game</p>\n"}, {"fullname": "schnapsen.bots", "modulename": "schnapsen.bots", "kind": "module", "doc": "<p>Create a bot in a separate .py and import them here, so that one can simply import\nit by from schnapsen.bots import MyBot.</p>\n"}, {"fullname": "schnapsen.bots.RandBot", "modulename": "schnapsen.bots", "qualname": "RandBot", "kind": "class", "doc": "<p>The Bot baseclass. Derive your own bots from this class and implement the get_move method to use it in games.</p>\n\n<p>Besides the get_move method, it is also possible to override notify_trump_exchange and notify_game_end to get notified when these events happen.</p>\n", "bases": "schnapsen.game.Bot"}, {"fullname": "schnapsen.bots.RandBot.__init__", "modulename": "schnapsen.bots", "qualname": "RandBot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "schnapsen.bots.RandBot.get_move", "modulename": "schnapsen.bots", "qualname": "RandBot.get_move", "kind": "function", "doc": "<p>Get the move this Bot wants to play.\nIf this Bot is leading, the leader_move will be None. If this both is following, the leader_move will contain the move the opponent just played</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.bots.AlphaBetaBot", "modulename": "schnapsen.bots", "qualname": "AlphaBetaBot", "kind": "class", "doc": "<p>The Bot baseclass. Derive your own bots from this class and implement the get_move method to use it in games.</p>\n\n<p>Besides the get_move method, it is also possible to override notify_trump_exchange and notify_game_end to get notified when these events happen.</p>\n", "bases": "schnapsen.game.Bot"}, {"fullname": "schnapsen.bots.AlphaBetaBot.__init__", "modulename": "schnapsen.bots", "qualname": "AlphaBetaBot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.bots.AlphaBetaBot.get_move", "modulename": "schnapsen.bots", "qualname": "AlphaBetaBot.get_move", "kind": "function", "doc": "<p>Get the move this Bot wants to play.\nIf this Bot is leading, the leader_move will be None. If this both is following, the leader_move will contain the move the opponent just played</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.bots.RdeepBot", "modulename": "schnapsen.bots", "qualname": "RdeepBot", "kind": "class", "doc": "<p>The Bot baseclass. Derive your own bots from this class and implement the get_move method to use it in games.</p>\n\n<p>Besides the get_move method, it is also possible to override notify_trump_exchange and notify_game_end to get notified when these events happen.</p>\n", "bases": "schnapsen.game.Bot"}, {"fullname": "schnapsen.bots.RdeepBot.__init__", "modulename": "schnapsen.bots", "qualname": "RdeepBot.__init__", "kind": "function", "doc": "<p>Create a new rdeep bot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_samples</strong>:  how many samples to take per move</li>\n<li><strong>depth</strong>:  how deep to sample</li>\n<li><strong>rand</strong>:  the source of randomness for this Bot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">rand</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">Random</span></span>)</span>"}, {"fullname": "schnapsen.bots.RdeepBot.get_move", "modulename": "schnapsen.bots", "qualname": "RdeepBot.get_move", "kind": "function", "doc": "<p>Get the move this Bot wants to play.\nIf this Bot is leading, the leader_move will be None. If this both is following, the leader_move will contain the move the opponent just played</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.bots.MLDataBot", "modulename": "schnapsen.bots", "qualname": "MLDataBot", "kind": "class", "doc": "<p>This class is defined to allow the creation of a training schnapsen bot dataset, that allows us to train a Machine Learning (ML) Bot\nPractically, it helps us record how the game plays out according to a provided Bot behaviour; build what is called a \"replay memory\"\nIn more detail, we create one training sample for each decision the bot makes within a game, where a decision is an action selection for a specific game state.\nThen we relate each decision with the outcome of the game, i.e. whether this bot won or not.\nThis way we can then train a bot according to the assumption that:\n    \"decisions in earlier games that ended up in victories should be preferred over decisions that lead to lost games\"\nThis class only records the decisions and game outcomes of the provided bot, according to its own perspective - incomplete game state knowledge.</p>\n", "bases": "schnapsen.game.Bot"}, {"fullname": "schnapsen.bots.MLDataBot.__init__", "modulename": "schnapsen.bots", "qualname": "MLDataBot.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bot</strong>:  the provided bot that will actually play the game and make decisions</li>\n<li><strong>replay_memory_location</strong>:  the filename under which the replay memory records will be</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>, </span><span class=\"param\"><span class=\"n\">replay_memory_location</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span>)</span>"}, {"fullname": "schnapsen.bots.MLDataBot.get_move", "modulename": "schnapsen.bots", "qualname": "MLDataBot.get_move", "kind": "function", "doc": "<p>This function simply calls the get_move of the provided bot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.bots.MLDataBot.notify_game_end", "modulename": "schnapsen.bots", "qualname": "MLDataBot.notify_game_end", "kind": "function", "doc": "<p>When the game ends, this function retrieves the game history and more specifically all the replay memories that can\nbe derived from it, and stores them in the form of state-actions vector representations and the corresponding outcome of the game</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>won</strong>:  Did this bot win the game?</li>\n<li><strong>state</strong>:  The final state of the game.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">won</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.bots.MLPlayingBot", "modulename": "schnapsen.bots", "qualname": "MLPlayingBot", "kind": "class", "doc": "<p>This class loads a trained ML model and uses it to play</p>\n", "bases": "schnapsen.game.Bot"}, {"fullname": "schnapsen.bots.MLPlayingBot.__init__", "modulename": "schnapsen.bots", "qualname": "MLPlayingBot.__init__", "kind": "function", "doc": "<p>Create a new MLPlayingBot which uses the model stored in the mofel_location.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_location</strong>:  The file containing the model.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_location</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "schnapsen.bots.MLPlayingBot.get_move", "modulename": "schnapsen.bots", "qualname": "MLPlayingBot.get_move", "kind": "function", "doc": "<p>Get the move this Bot wants to play.\nIf this Bot is leading, the leader_move will be None. If this both is following, the leader_move will contain the move the opponent just played</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.bots.train_ML_model", "modulename": "schnapsen.bots", "qualname": "train_ML_model", "kind": "function", "doc": "<p>Train the ML model for the MLPlayingBot based on replay memory stored byt the MLDataBot.\nThis implementation has the option to train a neural network model or a model based on linear regression.\nThe model classes used in this implemntation are not necesarily optimal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>replay_memory_location</strong>:  Location of the games stored by MLDataBot, default pathlib.Path('ML_replay_memories') / 'test_replay_memory'</li>\n<li><strong>model_location</strong>:  Location where the model will be stored, default pathlib.Path(\"ML_models\") / 'test_model'</li>\n<li><strong>model_class</strong>:  The machine learning model class to be used, either 'NN' for a neural network, or 'LR' for a linear regression.</li>\n<li><strong>overwrite</strong>:  Whether to overwrite a possibly existing model.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">replay_memory_location</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">model_location</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;NN&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LR&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LR&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.bots.SchnapsenServer", "modulename": "schnapsen.bots", "qualname": "SchnapsenServer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "schnapsen.bots.SchnapsenServer.__init__", "modulename": "schnapsen.bots", "qualname": "SchnapsenServer.__init__", "kind": "function", "doc": "<p>Creates and starts the schnapsen server</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;0.0.0.0&#39;</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span></span>)</span>"}, {"fullname": "schnapsen.bots.SchnapsenServer.make_gui_bot", "modulename": "schnapsen.bots", "qualname": "SchnapsenServer.make_gui_bot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck", "modulename": "schnapsen.deck", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "schnapsen.deck.Suit", "modulename": "schnapsen.deck", "qualname": "Suit", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "schnapsen.deck.Suit.HEARTS", "modulename": "schnapsen.deck", "qualname": "Suit.HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Suit.HEARTS: 1&gt;"}, {"fullname": "schnapsen.deck.Suit.CLUBS", "modulename": "schnapsen.deck", "qualname": "Suit.CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Suit.CLUBS: 2&gt;"}, {"fullname": "schnapsen.deck.Suit.SPADES", "modulename": "schnapsen.deck", "qualname": "Suit.SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Suit.SPADES: 3&gt;"}, {"fullname": "schnapsen.deck.Suit.DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Suit.DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Suit.DIAMONDS: 4&gt;"}, {"fullname": "schnapsen.deck.Rank", "modulename": "schnapsen.deck", "qualname": "Rank", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "schnapsen.deck.Rank.ACE", "modulename": "schnapsen.deck", "qualname": "Rank.ACE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.ACE: 1&gt;"}, {"fullname": "schnapsen.deck.Rank.TWO", "modulename": "schnapsen.deck", "qualname": "Rank.TWO", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.TWO: 2&gt;"}, {"fullname": "schnapsen.deck.Rank.THREE", "modulename": "schnapsen.deck", "qualname": "Rank.THREE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.THREE: 3&gt;"}, {"fullname": "schnapsen.deck.Rank.FOUR", "modulename": "schnapsen.deck", "qualname": "Rank.FOUR", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.FOUR: 4&gt;"}, {"fullname": "schnapsen.deck.Rank.FIVE", "modulename": "schnapsen.deck", "qualname": "Rank.FIVE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.FIVE: 5&gt;"}, {"fullname": "schnapsen.deck.Rank.SIX", "modulename": "schnapsen.deck", "qualname": "Rank.SIX", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.SIX: 6&gt;"}, {"fullname": "schnapsen.deck.Rank.SEVEN", "modulename": "schnapsen.deck", "qualname": "Rank.SEVEN", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.SEVEN: 7&gt;"}, {"fullname": "schnapsen.deck.Rank.EIGHT", "modulename": "schnapsen.deck", "qualname": "Rank.EIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.EIGHT: 8&gt;"}, {"fullname": "schnapsen.deck.Rank.NINE", "modulename": "schnapsen.deck", "qualname": "Rank.NINE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.NINE: 9&gt;"}, {"fullname": "schnapsen.deck.Rank.TEN", "modulename": "schnapsen.deck", "qualname": "Rank.TEN", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.TEN: 10&gt;"}, {"fullname": "schnapsen.deck.Rank.JACK", "modulename": "schnapsen.deck", "qualname": "Rank.JACK", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.JACK: 11&gt;"}, {"fullname": "schnapsen.deck.Rank.QUEEN", "modulename": "schnapsen.deck", "qualname": "Rank.QUEEN", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.QUEEN: 12&gt;"}, {"fullname": "schnapsen.deck.Rank.KING", "modulename": "schnapsen.deck", "qualname": "Rank.KING", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;Rank.KING: 13&gt;"}, {"fullname": "schnapsen.deck.Card", "modulename": "schnapsen.deck", "qualname": "Card", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "schnapsen.deck.Card.ACE_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.ACE_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.ACE_HEARTS"}, {"fullname": "schnapsen.deck.Card.TWO_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.TWO_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TWO_HEARTS"}, {"fullname": "schnapsen.deck.Card.THREE_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.THREE_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.THREE_HEARTS"}, {"fullname": "schnapsen.deck.Card.FOUR_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.FOUR_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FOUR_HEARTS"}, {"fullname": "schnapsen.deck.Card.FIVE_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.FIVE_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FIVE_HEARTS"}, {"fullname": "schnapsen.deck.Card.SIX_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.SIX_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SIX_HEARTS"}, {"fullname": "schnapsen.deck.Card.SEVEN_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.SEVEN_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SEVEN_HEARTS"}, {"fullname": "schnapsen.deck.Card.EIGHT_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.EIGHT_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.EIGHT_HEARTS"}, {"fullname": "schnapsen.deck.Card.NINE_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.NINE_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.NINE_HEARTS"}, {"fullname": "schnapsen.deck.Card.TEN_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.TEN_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TEN_HEARTS"}, {"fullname": "schnapsen.deck.Card.JACK_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.JACK_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.JACK_HEARTS"}, {"fullname": "schnapsen.deck.Card.QUEEN_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.QUEEN_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.QUEEN_HEARTS"}, {"fullname": "schnapsen.deck.Card.KING_HEARTS", "modulename": "schnapsen.deck", "qualname": "Card.KING_HEARTS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.KING_HEARTS"}, {"fullname": "schnapsen.deck.Card.ACE_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.ACE_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.ACE_CLUBS"}, {"fullname": "schnapsen.deck.Card.TWO_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.TWO_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TWO_CLUBS"}, {"fullname": "schnapsen.deck.Card.THREE_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.THREE_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.THREE_CLUBS"}, {"fullname": "schnapsen.deck.Card.FOUR_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.FOUR_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FOUR_CLUBS"}, {"fullname": "schnapsen.deck.Card.FIVE_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.FIVE_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FIVE_CLUBS"}, {"fullname": "schnapsen.deck.Card.SIX_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.SIX_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SIX_CLUBS"}, {"fullname": "schnapsen.deck.Card.SEVEN_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.SEVEN_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SEVEN_CLUBS"}, {"fullname": "schnapsen.deck.Card.EIGHT_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.EIGHT_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.EIGHT_CLUBS"}, {"fullname": "schnapsen.deck.Card.NINE_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.NINE_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.NINE_CLUBS"}, {"fullname": "schnapsen.deck.Card.TEN_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.TEN_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TEN_CLUBS"}, {"fullname": "schnapsen.deck.Card.JACK_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.JACK_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.JACK_CLUBS"}, {"fullname": "schnapsen.deck.Card.QUEEN_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.QUEEN_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.QUEEN_CLUBS"}, {"fullname": "schnapsen.deck.Card.KING_CLUBS", "modulename": "schnapsen.deck", "qualname": "Card.KING_CLUBS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.KING_CLUBS"}, {"fullname": "schnapsen.deck.Card.ACE_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.ACE_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.ACE_SPADES"}, {"fullname": "schnapsen.deck.Card.TWO_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.TWO_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TWO_SPADES"}, {"fullname": "schnapsen.deck.Card.THREE_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.THREE_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.THREE_SPADES"}, {"fullname": "schnapsen.deck.Card.FOUR_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.FOUR_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FOUR_SPADES"}, {"fullname": "schnapsen.deck.Card.FIVE_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.FIVE_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FIVE_SPADES"}, {"fullname": "schnapsen.deck.Card.SIX_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.SIX_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SIX_SPADES"}, {"fullname": "schnapsen.deck.Card.SEVEN_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.SEVEN_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SEVEN_SPADES"}, {"fullname": "schnapsen.deck.Card.EIGHT_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.EIGHT_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.EIGHT_SPADES"}, {"fullname": "schnapsen.deck.Card.NINE_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.NINE_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.NINE_SPADES"}, {"fullname": "schnapsen.deck.Card.TEN_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.TEN_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TEN_SPADES"}, {"fullname": "schnapsen.deck.Card.JACK_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.JACK_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.JACK_SPADES"}, {"fullname": "schnapsen.deck.Card.QUEEN_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.QUEEN_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.QUEEN_SPADES"}, {"fullname": "schnapsen.deck.Card.KING_SPADES", "modulename": "schnapsen.deck", "qualname": "Card.KING_SPADES", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.KING_SPADES"}, {"fullname": "schnapsen.deck.Card.ACE_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.ACE_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.ACE_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.TWO_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.TWO_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TWO_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.THREE_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.THREE_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.THREE_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.FOUR_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.FOUR_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FOUR_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.FIVE_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.FIVE_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.FIVE_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.SIX_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.SIX_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SIX_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.SEVEN_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.SEVEN_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.SEVEN_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.EIGHT_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.EIGHT_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.EIGHT_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.NINE_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.NINE_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.NINE_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.TEN_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.TEN_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.TEN_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.JACK_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.JACK_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.JACK_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.QUEEN_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.QUEEN_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.QUEEN_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.KING_DIAMONDS", "modulename": "schnapsen.deck", "qualname": "Card.KING_DIAMONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = Card.KING_DIAMONDS"}, {"fullname": "schnapsen.deck.Card.get_card", "modulename": "schnapsen.deck", "qualname": "Card.get_card", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Rank</span>,</span><span class=\"param\">\t<span class=\"n\">suit</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.CardCollection", "modulename": "schnapsen.deck", "qualname": "CardCollection", "kind": "class", "doc": "<p>A collection of cards for which the order is not significant and not guaranteed.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.deck.CardCollection.get_cards", "modulename": "schnapsen.deck", "qualname": "CardCollection.get_cards", "kind": "function", "doc": "<p>Get an Iterable of the cards in this collection. Changes to this Iterable will not be reflected in this Collection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.CardCollection.filter_suit", "modulename": "schnapsen.deck", "qualname": "CardCollection.filter_suit", "kind": "function", "doc": "<p>Returns an Iterable with in it all cards which have the provided suit</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">suit</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.CardCollection.filter_rank", "modulename": "schnapsen.deck", "qualname": "CardCollection.filter_rank", "kind": "function", "doc": "<p>Returns an Iterable with in it all cards which have the provided rank</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Rank</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.CardCollection.is_empty", "modulename": "schnapsen.deck", "qualname": "CardCollection.is_empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.OrderedCardCollection", "modulename": "schnapsen.deck", "qualname": "OrderedCardCollection", "kind": "class", "doc": "<p>A collection of cards for which the order is not significant and not guaranteed.</p>\n", "bases": "CardCollection"}, {"fullname": "schnapsen.deck.OrderedCardCollection.__init__", "modulename": "schnapsen.deck", "qualname": "OrderedCardCollection.__init__", "kind": "function", "doc": "<p>Create an ordered collection of cards. The cards are in the order as specified in the Iterable.\nBy default the Collection is empty.\nThis constructor will make a defensive copy of the argument.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cards</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "schnapsen.deck.OrderedCardCollection.is_empty", "modulename": "schnapsen.deck", "qualname": "OrderedCardCollection.is_empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.OrderedCardCollection.get_cards", "modulename": "schnapsen.deck", "qualname": "OrderedCardCollection.get_cards", "kind": "function", "doc": "<p>Get an Iterable of the cards in this collection. Changes to this Iterable will not be reflected in this Collection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.OrderedCardCollection.filter_suit", "modulename": "schnapsen.deck", "qualname": "OrderedCardCollection.filter_suit", "kind": "function", "doc": "<p>Returns an Iterable with in it all cards which have the provided suit</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">suit</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.deck.OrderedCardCollection.filter_rank", "modulename": "schnapsen.deck", "qualname": "OrderedCardCollection.filter_rank", "kind": "function", "doc": "<p>Returns an Iterable with in it all cards which have the provided rank</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Rank</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game", "modulename": "schnapsen.game", "kind": "module", "doc": "<p>In this module you will find all parts related to playing a game of Schnapsen.</p>\n"}, {"fullname": "schnapsen.game.Bot", "modulename": "schnapsen.game", "qualname": "Bot", "kind": "class", "doc": "<p>The Bot baseclass. Derive your own bots from this class and implement the get_move method to use it in games.</p>\n\n<p>Besides the get_move method, it is also possible to override notify_trump_exchange and notify_game_end to get notified when these events happen.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.Bot.get_move", "modulename": "schnapsen.game", "qualname": "Bot.get_move", "kind": "function", "doc": "<p>Get the move this Bot wants to play.\nIf this Bot is leading, the leader_move will be None. If this both is following, the leader_move will contain the move the opponent just played</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Bot.notify_trump_exchange", "modulename": "schnapsen.game", "qualname": "Bot.notify_trump_exchange", "kind": "function", "doc": "<p>Overide this method to get notified about trump exchanges. Note that this only notifies about the other bots exchanges.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>move</strong>:  the Trump Exchange move that was played.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trump_Exchange</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Bot.notify_game_end", "modulename": "schnapsen.game", "qualname": "Bot.notify_game_end", "kind": "function", "doc": "<p>Override this method to get notified about the end of the game.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>won</strong>:  Did this bot win the game?</li>\n<li><strong>state</strong>:  The final state of the game.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">won</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Move", "modulename": "schnapsen.game", "qualname": "Move", "kind": "class", "doc": "<p>A single move during a game. There are several types of move possible: normal moves, trump exchanges, and marriages. They are implmented in classes inheriting from this class.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.Move.cards", "modulename": "schnapsen.game", "qualname": "Move.cards", "kind": "variable", "doc": "<p>The cards played in this move</p>\n", "annotation": ": list[schnapsen.deck.Card]"}, {"fullname": "schnapsen.game.Move.is_regular_move", "modulename": "schnapsen.game", "qualname": "Move.is_regular_move", "kind": "function", "doc": "<p>Is this Move a regular move (not a mariage or trump exchange)</p>\n\n<p>:returns: a bool indicating whether this is a regular move</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Move.as_regular_move", "modulename": "schnapsen.game", "qualname": "Move.as_regular_move", "kind": "function", "doc": "<p>Returns this same move but as a Marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularMove</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Move.is_marriage", "modulename": "schnapsen.game", "qualname": "Move.is_marriage", "kind": "function", "doc": "<p>Is this Move a marriage?</p>\n\n<p>:returns: a bool indicating whether this move is a marriage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Move.as_marriage", "modulename": "schnapsen.game", "qualname": "Move.as_marriage", "kind": "function", "doc": "<p>Returns this same move but as a Marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Marriage</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Move.is_trump_exchange", "modulename": "schnapsen.game", "qualname": "Move.is_trump_exchange", "kind": "function", "doc": "<p>Is this Move a trump exchange move?</p>\n\n<p>:returns: a bool indicating whether this move is a trump exchange</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Move.as_trump_exchange", "modulename": "schnapsen.game", "qualname": "Move.as_trump_exchange", "kind": "function", "doc": "<p>Returns this same move but as a Trump_Exchange.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trump_Exchange</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Trump_Exchange", "modulename": "schnapsen.game", "qualname": "Trump_Exchange", "kind": "class", "doc": "<p>A move that implements the exchange of the trump card for a Jack of the same suit.</p>\n", "bases": "Move"}, {"fullname": "schnapsen.game.Trump_Exchange.__init__", "modulename": "schnapsen.game", "qualname": "Trump_Exchange.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">jack</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span></span>)</span>"}, {"fullname": "schnapsen.game.Trump_Exchange.jack", "modulename": "schnapsen.game", "qualname": "Trump_Exchange.jack", "kind": "variable", "doc": "<p>The Jack which will be placed at the bottom of the Talon</p>\n", "annotation": ": schnapsen.deck.Card"}, {"fullname": "schnapsen.game.Trump_Exchange.is_trump_exchange", "modulename": "schnapsen.game", "qualname": "Trump_Exchange.is_trump_exchange", "kind": "function", "doc": "<p>Is this Move a trump exchange move?</p>\n\n<p>:returns: a bool indicating whether this move is a trump exchange</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Trump_Exchange.as_trump_exchange", "modulename": "schnapsen.game", "qualname": "Trump_Exchange.as_trump_exchange", "kind": "function", "doc": "<p>Returns this same move but as a Trump_Exchange.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trump_Exchange</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.RegularMove", "modulename": "schnapsen.game", "qualname": "RegularMove", "kind": "class", "doc": "<p>A regular move in the game</p>\n", "bases": "Move"}, {"fullname": "schnapsen.game.RegularMove.__init__", "modulename": "schnapsen.game", "qualname": "RegularMove.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">card</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span></span>)</span>"}, {"fullname": "schnapsen.game.RegularMove.card", "modulename": "schnapsen.game", "qualname": "RegularMove.card", "kind": "variable", "doc": "<p>The card which is played</p>\n", "annotation": ": schnapsen.deck.Card"}, {"fullname": "schnapsen.game.RegularMove.from_cards", "modulename": "schnapsen.game", "qualname": "RegularMove.from_cards", "kind": "function", "doc": "<p>Create an iterable of Moves from an iterable of cards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cards</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.RegularMove.is_regular_move", "modulename": "schnapsen.game", "qualname": "RegularMove.is_regular_move", "kind": "function", "doc": "<p>Is this Move a regular move (not a mariage or trump exchange)</p>\n\n<p>:returns: a bool indicating whether this is a regular move</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.RegularMove.as_regular_move", "modulename": "schnapsen.game", "qualname": "RegularMove.as_regular_move", "kind": "function", "doc": "<p>Returns this same move but as a Marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularMove</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Marriage", "modulename": "schnapsen.game", "qualname": "Marriage", "kind": "class", "doc": "<p>A Move representing a marriage in the game. This move has two cards, a king and a queen of the same suit.\nRight after the marriage is played, the player must play either the queen or the king.\nBecause it can only be beneficial to play the queen, it is chosen automatically.\nThis Regular move is part of this Move already and does not have to be played separatly.</p>\n", "bases": "Move"}, {"fullname": "schnapsen.game.Marriage.__init__", "modulename": "schnapsen.game", "qualname": "Marriage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">queen_card</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span>, </span><span class=\"param\"><span class=\"n\">king_card</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span></span>)</span>"}, {"fullname": "schnapsen.game.Marriage.queen_card", "modulename": "schnapsen.game", "qualname": "Marriage.queen_card", "kind": "variable", "doc": "<p>The queen card of this marriage</p>\n", "annotation": ": schnapsen.deck.Card"}, {"fullname": "schnapsen.game.Marriage.king_card", "modulename": "schnapsen.game", "qualname": "Marriage.king_card", "kind": "variable", "doc": "<p>The king card of this marriage</p>\n", "annotation": ": schnapsen.deck.Card"}, {"fullname": "schnapsen.game.Marriage.suit", "modulename": "schnapsen.game", "qualname": "Marriage.suit", "kind": "variable", "doc": "<p>The suit of this marriage, gets derived from the suit of the queen and king.</p>\n", "annotation": ": schnapsen.deck.Suit"}, {"fullname": "schnapsen.game.Marriage.is_marriage", "modulename": "schnapsen.game", "qualname": "Marriage.is_marriage", "kind": "function", "doc": "<p>Is this Move a marriage?</p>\n\n<p>:returns: a bool indicating whether this move is a marriage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Marriage.as_marriage", "modulename": "schnapsen.game", "qualname": "Marriage.as_marriage", "kind": "function", "doc": "<p>Returns this same move but as a Marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Marriage</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Marriage.underlying_regular_move", "modulename": "schnapsen.game", "qualname": "Marriage.underlying_regular_move", "kind": "function", "doc": "<p>Get the regular move which was played because of the marriage. In this engine this is always the queen card.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularMove</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand", "modulename": "schnapsen.game", "qualname": "Hand", "kind": "class", "doc": "<p>Representing the cards in the hand of a player. These are the cards which the player can see and which he can play with in the turn.</p>\n", "bases": "schnapsen.deck.CardCollection"}, {"fullname": "schnapsen.game.Hand.__init__", "modulename": "schnapsen.game", "qualname": "Hand.__init__", "kind": "function", "doc": "<p>Create a hand containing the cards.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cards</strong>:  The cards to be added to the hand</li>\n<li><strong>max_size</strong>:  The maximum number of cards the hand can contain. If the number of cards goes beyond, an Exception is raised.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cards</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">max_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span>)</span>"}, {"fullname": "schnapsen.game.Hand.remove", "modulename": "schnapsen.game", "qualname": "Hand.remove", "kind": "function", "doc": "<p>Remove one occurence of the card from this hand</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">card</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand.add", "modulename": "schnapsen.game", "qualname": "Hand.add", "kind": "function", "doc": "<p>Add a card to the Hand</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>card</strong>:   The card to be added to the hand</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">card</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand.has_cards", "modulename": "schnapsen.game", "qualname": "Hand.has_cards", "kind": "function", "doc": "<p>Are all the cards contained in this Hand?</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cards</strong>:  An iterable of cards which need to be checked\n:returns: Whether all cards in the provided iterable are in this Hand</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cards</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand.copy", "modulename": "schnapsen.game", "qualname": "Hand.copy", "kind": "function", "doc": "<p>Create a deep copy of this Hand</p>\n\n<p>:returns: A deep copy of this hand. Changes to the original will not affect the copy and vice versa.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand.is_empty", "modulename": "schnapsen.game", "qualname": "Hand.is_empty", "kind": "function", "doc": "<p>Is the Hand emoty?</p>\n\n<p>:returns: A bool indicating whether the hand is empty</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand.get_cards", "modulename": "schnapsen.game", "qualname": "Hand.get_cards", "kind": "function", "doc": "<p>Get an Iterable of the cards in this collection. Changes to this Iterable will not be reflected in this Collection</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand.filter_suit", "modulename": "schnapsen.game", "qualname": "Hand.filter_suit", "kind": "function", "doc": "<p>Returns an Iterable with in it all cards which have the provided suit</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">suit</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Hand.filter_rank", "modulename": "schnapsen.game", "qualname": "Hand.filter_rank", "kind": "function", "doc": "<p>Returns an Iterable with in it all cards which have the provided rank</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Rank</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Talon", "modulename": "schnapsen.game", "qualname": "Talon", "kind": "class", "doc": "<p>The Talon contains the cards which have not yet been given to the players.</p>\n", "bases": "schnapsen.deck.OrderedCardCollection"}, {"fullname": "schnapsen.game.Talon.__init__", "modulename": "schnapsen.game", "qualname": "Talon.__init__", "kind": "function", "doc": "<p>The cards of the Talon. The last card of the iterable is the bottommost card.\nThe first one is the top card (which will be taken is a card is drawn)\nThe Trump card is at the bottom of the Talon.\nThe trump_suit can also be specified explicitly, which is important when the Talon is empty.\nIf the trump_suit is specified and there are cards, then the suit of the bottommost card must be the same.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cards</strong>:  The cards to be put on this talon, a defensive copy will be made.</li>\n<li><strong>trump_suit</strong>:  The trump suit of the Talon, important if there are no more cards to be taken.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cards</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">trump_suit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "schnapsen.game.Talon.copy", "modulename": "schnapsen.game", "qualname": "Talon.copy", "kind": "function", "doc": "<p>Create an independent copy of this talon.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Talon</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Talon.trump_exchange", "modulename": "schnapsen.game", "qualname": "Talon.trump_exchange", "kind": "function", "doc": "<p>perfom a trump-jack exchange. The card to be put as the trump card must be a Jack of the same suit.\nAs a result, this Talon changed: the old trump is removed and the new_trump is at the bottom of the Talon</p>\n\n<p>We also require that there must be two cards on the Talon, which is always the case in a normal game of Schnapsen</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>new_trump</strong>:  The card to be put. It must be a Jack of the same suit as the card at the bottom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_trump</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Talon.draw_cards", "modulename": "schnapsen.game", "qualname": "Talon.draw_cards", "kind": "function", "doc": "<p>Draw a card from this Talon. This does not change the talon, btu rather returns a talon with the change applied and the card drawn</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Talon.trump_suit", "modulename": "schnapsen.game", "qualname": "Talon.trump_suit", "kind": "function", "doc": "<p>Return the suit of the trump card, i.e., the bottommost card.\nThis still works, even when the Talon has become empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Talon.trump_card", "modulename": "schnapsen.game", "qualname": "Talon.trump_card", "kind": "function", "doc": "<p>Returns the current trump card, i.e., the bottommost card.\nOr None in case this Talon is empty</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Trick", "modulename": "schnapsen.game", "qualname": "Trick", "kind": "class", "doc": "<p>A complete trick. This is, the move of the leader and if that was not an exchange, the move of the follower.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.Trick.cards", "modulename": "schnapsen.game", "qualname": "Trick.cards", "kind": "variable", "doc": "<p>All cards used as part of this trick. This includes cards used in marriages</p>\n", "annotation": ": Iterable[schnapsen.deck.Card]"}, {"fullname": "schnapsen.game.Trick.is_trump_exchange", "modulename": "schnapsen.game", "qualname": "Trick.is_trump_exchange", "kind": "function", "doc": "<p>Returns True if this is a trump exchange</p>\n\n<p>:returns: True in case this was a trump exchange</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Trick.as_partial", "modulename": "schnapsen.game", "qualname": "Trick.as_partial", "kind": "function", "doc": "<p>Returns the first part of this trick. Raises an Exceptption if this is not a Trick with two parts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PartialTrick</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeTrick", "modulename": "schnapsen.game", "qualname": "ExchangeTrick", "kind": "class", "doc": "<p>A Trick in which the player does a trump exchange.</p>\n", "bases": "Trick"}, {"fullname": "schnapsen.game.ExchangeTrick.__init__", "modulename": "schnapsen.game", "qualname": "ExchangeTrick.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exchange</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trump_Exchange</span>,</span><span class=\"param\">\t<span class=\"n\">trump_card</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span></span>)</span>"}, {"fullname": "schnapsen.game.ExchangeTrick.exchange", "modulename": "schnapsen.game", "qualname": "ExchangeTrick.exchange", "kind": "variable", "doc": "<p>A trump exchange by the leading player</p>\n", "annotation": ": schnapsen.game.Trump_Exchange"}, {"fullname": "schnapsen.game.ExchangeTrick.trump_card", "modulename": "schnapsen.game", "qualname": "ExchangeTrick.trump_card", "kind": "variable", "doc": "<p>The card at the bottom of the talon</p>\n", "annotation": ": schnapsen.deck.Card"}, {"fullname": "schnapsen.game.ExchangeTrick.is_trump_exchange", "modulename": "schnapsen.game", "qualname": "ExchangeTrick.is_trump_exchange", "kind": "function", "doc": "<p>Returns True if this is a trump exchange</p>\n\n<p>:returns: True in case this was a trump exchange</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeTrick.as_partial", "modulename": "schnapsen.game", "qualname": "ExchangeTrick.as_partial", "kind": "function", "doc": "<p>Returns the first part of this trick. Raises an Exceptption if this is not a Trick with two parts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PartialTrick</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PartialTrick", "modulename": "schnapsen.game", "qualname": "PartialTrick", "kind": "class", "doc": "<p>A partial trick is the move(s) played by the leading player.</p>\n"}, {"fullname": "schnapsen.game.PartialTrick.__init__", "modulename": "schnapsen.game", "qualname": "PartialTrick.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularMove</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Marriage</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "schnapsen.game.PartialTrick.leader_move", "modulename": "schnapsen.game", "qualname": "PartialTrick.leader_move", "kind": "variable", "doc": "<p>The move played by the leader of the trick</p>\n", "annotation": ": Union[schnapsen.game.RegularMove, schnapsen.game.Marriage]"}, {"fullname": "schnapsen.game.PartialTrick.is_trump_exchange", "modulename": "schnapsen.game", "qualname": "PartialTrick.is_trump_exchange", "kind": "function", "doc": "<p>is this PartialTrick a Trump exchange?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.RegularTrick", "modulename": "schnapsen.game", "qualname": "RegularTrick", "kind": "class", "doc": "<p>A regular trick, with a move by the leader and a move by the follower</p>\n", "bases": "Trick, PartialTrick"}, {"fullname": "schnapsen.game.RegularTrick.__init__", "modulename": "schnapsen.game", "qualname": "RegularTrick.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularMove</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Marriage</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">follower_move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularMove</span></span>)</span>"}, {"fullname": "schnapsen.game.RegularTrick.follower_move", "modulename": "schnapsen.game", "qualname": "RegularTrick.follower_move", "kind": "variable", "doc": "<p>The move played by the follower</p>\n", "annotation": ": schnapsen.game.RegularMove"}, {"fullname": "schnapsen.game.RegularTrick.is_trump_exchange", "modulename": "schnapsen.game", "qualname": "RegularTrick.is_trump_exchange", "kind": "function", "doc": "<p>Returns True if this is a trump exchange</p>\n\n<p>:returns: True in case this was a trump exchange</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.RegularTrick.as_partial", "modulename": "schnapsen.game", "qualname": "RegularTrick.as_partial", "kind": "function", "doc": "<p>Returns the first part of this trick. Raises an Exceptption if this is not a Trick with two parts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PartialTrick</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Score", "modulename": "schnapsen.game", "qualname": "Score", "kind": "class", "doc": "<p>The score of one of the bots. This consists of the current points and potential pending points because of an earlier played marriage.\nNote that the socre object is immutable and supports the <code>+</code> operator, so it can be used somewhat as a usual number.</p>\n"}, {"fullname": "schnapsen.game.Score.__init__", "modulename": "schnapsen.game", "qualname": "Score.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">direct_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">pending_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "schnapsen.game.Score.direct_points", "modulename": "schnapsen.game", "qualname": "Score.direct_points", "kind": "variable", "doc": "<p>The current number of points</p>\n", "annotation": ": int", "default_value": " = 0"}, {"fullname": "schnapsen.game.Score.pending_points", "modulename": "schnapsen.game", "qualname": "Score.pending_points", "kind": "variable", "doc": "<p>Points to be applied in the future because of a past marriage</p>\n", "annotation": ": int", "default_value": " = 0"}, {"fullname": "schnapsen.game.Score.redeem_pending_points", "modulename": "schnapsen.game", "qualname": "Score.redeem_pending_points", "kind": "function", "doc": "<p>Redeem the pending points</p>\n\n<p>:returns: A new score object with the pending points added to the direct points and the pending points set to zero.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GamePhase", "modulename": "schnapsen.game", "qualname": "GamePhase", "kind": "class", "doc": "<p>An indicator about the phase of the game. This is used because in Schnapsen, the rules change when the game enters the second phase.</p>\n", "bases": "enum.Enum"}, {"fullname": "schnapsen.game.GamePhase.ONE", "modulename": "schnapsen.game", "qualname": "GamePhase.ONE", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;GamePhase.ONE: 1&gt;"}, {"fullname": "schnapsen.game.GamePhase.TWO", "modulename": "schnapsen.game", "qualname": "GamePhase.TWO", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;GamePhase.TWO: 2&gt;"}, {"fullname": "schnapsen.game.BotState", "modulename": "schnapsen.game", "qualname": "BotState", "kind": "class", "doc": "<p>A bot with its implementation and current state in a game</p>\n"}, {"fullname": "schnapsen.game.BotState.__init__", "modulename": "schnapsen.game", "qualname": "BotState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">implementation</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">hand</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">won_cards</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "schnapsen.game.BotState.get_move", "modulename": "schnapsen.game", "qualname": "BotState.get_move", "kind": "function", "doc": "<p>Gets the next move from the bot itself, passing it the state.\nDoes a quick check to make sure that the hand has the cards which are played. More advanced checks are performed outside of this call.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>state</strong>:  The PlayerGameState which contains the information on the current state of the game from the perspective of this player\n:returns: The move the both played</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.BotState.copy", "modulename": "schnapsen.game", "qualname": "BotState.copy", "kind": "function", "doc": "<p>Makes a deep copy of the current state.</p>\n\n<p>:returns: The deep copy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.Previous", "modulename": "schnapsen.game", "qualname": "Previous", "kind": "class", "doc": "<p>Information about the previous GameState.\nThis object can be used to access the history which lead to the current GameState</p>\n"}, {"fullname": "schnapsen.game.Previous.__init__", "modulename": "schnapsen.game", "qualname": "Previous.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">trick</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trick</span>,</span><span class=\"param\">\t<span class=\"n\">leader_remained_leader</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "schnapsen.game.Previous.state", "modulename": "schnapsen.game", "qualname": "Previous.state", "kind": "variable", "doc": "<p>The previous state of the game.</p>\n", "annotation": ": schnapsen.game.GameState"}, {"fullname": "schnapsen.game.Previous.trick", "modulename": "schnapsen.game", "qualname": "Previous.trick", "kind": "variable", "doc": "<p>The trick which led to the current Gamestate from the Previous state</p>\n", "annotation": ": schnapsen.game.Trick"}, {"fullname": "schnapsen.game.Previous.leader_remained_leader", "modulename": "schnapsen.game", "qualname": "Previous.leader_remained_leader", "kind": "variable", "doc": "<p>Did the leader of remain the leader.</p>\n", "annotation": ": bool"}, {"fullname": "schnapsen.game.GameState", "modulename": "schnapsen.game", "qualname": "GameState", "kind": "class", "doc": "<p>The current state of the game, as seen by the game engine.\nThis contains all information about the positions of the cards, bots, scores, etc.\nThe bot must not get direct access to this information because it would allow it to cheat.</p>\n"}, {"fullname": "schnapsen.game.GameState.__init__", "modulename": "schnapsen.game", "qualname": "GameState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">leader</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">follower</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">talon</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Talon</span>,</span><span class=\"param\">\t<span class=\"n\">previous</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Previous</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "schnapsen.game.GameState.leader", "modulename": "schnapsen.game", "qualname": "GameState.leader", "kind": "variable", "doc": "<p>The current leader, i.e., the one who will play the first move in the next trick</p>\n", "annotation": ": schnapsen.game.BotState"}, {"fullname": "schnapsen.game.GameState.follower", "modulename": "schnapsen.game", "qualname": "GameState.follower", "kind": "variable", "doc": "<p>The current follower, i.e., the one who will play the second move in the next trick</p>\n", "annotation": ": schnapsen.game.BotState"}, {"fullname": "schnapsen.game.GameState.trump_suit", "modulename": "schnapsen.game", "qualname": "GameState.trump_suit", "kind": "variable", "doc": "<p>The trump suit in this game. This information is also in the Talon.</p>\n", "annotation": ": schnapsen.deck.Suit"}, {"fullname": "schnapsen.game.GameState.talon", "modulename": "schnapsen.game", "qualname": "GameState.talon", "kind": "variable", "doc": "<p>The talon, containing the cards not yet in the hand of the player and the trump card at the bottom</p>\n", "annotation": ": schnapsen.game.Talon"}, {"fullname": "schnapsen.game.GameState.previous", "modulename": "schnapsen.game", "qualname": "GameState.previous", "kind": "variable", "doc": "<p>The events which led to this GameState, or None, if this is the initial GameState (or previous tricks and states are unknown)</p>\n", "annotation": ": Optional[schnapsen.game.Previous]"}, {"fullname": "schnapsen.game.GameState.copy_for_next", "modulename": "schnapsen.game", "qualname": "GameState.copy_for_next", "kind": "function", "doc": "<p>Make a copy of the gamestate, modified such that the previous state is this state, but the previous trick is not filled yet.\nThis is used to create a GameState which will be modified to become the next gamestate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GameState.copy_with_other_bots", "modulename": "schnapsen.game", "qualname": "GameState.copy_with_other_bots", "kind": "function", "doc": "<p>Make a copy of the gamestate, modified such that the bots are replaced by the provided ones.\nThis is used to continue playing an existing GameState with different bots.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_leader</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">new_follower</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GameState.game_phase", "modulename": "schnapsen.game", "qualname": "GameState.game_phase", "kind": "function", "doc": "<p>What is the current phase of the game</p>\n\n<p>:returns: GamePhase.ONE or GamePahse.TWO indicating the current phase</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePhase</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GameState.are_all_cards_played", "modulename": "schnapsen.game", "qualname": "GameState.are_all_cards_played", "kind": "function", "doc": "<p>Returns True in case the players have played all their cards and the game is has come to an end</p>\n\n<p>:returns: Wheter all cards have been played</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective", "modulename": "schnapsen.game", "qualname": "PlayerPerspective", "kind": "class", "doc": "<p>The perspective a player has on the state of the game. This only gives access to the partially observable information.\nThe Bot gets passed an instance of this class when it gets requested a move by the GamePlayEngine</p>\n\n<p>This class has several convenience methods to get more information about the current state.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.PlayerPerspective.valid_moves", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.valid_moves", "kind": "function", "doc": "<p>Get a list of all valid moves the bot can play at this point in the game.</p>\n\n<p>Design note: this could also return an Iterable[Move], but list[Move] was chosen to make the API easier to use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_game_history", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_game_history", "kind": "function", "doc": "<p>The game history from the perspective of the player. This means all the past PlayerPerspective this bot has seen, and the Tricks played.\nThis only provides access to cards the Bot is allowed to see.</p>\n\n<p>:returns: The PlayerPerspective and Tricks in chronological order, index 0 is the first round played. Only the last Trick will be None.\nThe last pair will contain the current PlayerGameState.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trick</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_hand", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_hand", "kind": "function", "doc": "<p>Get the cards in the hand of the current player</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_my_score", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_my_score", "kind": "function", "doc": "<p>Get the socre of the current player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_opponent_score", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_opponent_score", "kind": "function", "doc": "<p>Get the socre of the other player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_trump_suit", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_trump_suit", "kind": "function", "doc": "<p>Get the suit of the trump</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_trump_card", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_trump_card", "kind": "function", "doc": "<p>Get the card which is at the bottom of the talon. Will be None if the talon is empty</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Card</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_talon_size", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_talon_size", "kind": "function", "doc": "<p>How many cards are still on the talon?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_phase", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_phase", "kind": "function", "doc": "<p>What is the pahse of the game? This returns a GamePhase object.\nYou can check the phase by checking state.get_phase == GamePhase.ONE</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePhase</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_opponent_hand_in_phase_two", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_opponent_hand_in_phase_two", "kind": "function", "doc": "<p>If the game is in the second phase, you can get the cards in the hand of the opponent.\nIf this gets called, but the second pahse has not started yet, this will throw en Exception</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.am_i_leader", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.am_i_leader", "kind": "function", "doc": "<p>Returns True if the bot is the leader of this trick, False if it is a follower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_won_cards", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_won_cards", "kind": "function", "doc": "<p>Get a list of all cards this Bot has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_opponent_won_cards", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_opponent_won_cards", "kind": "function", "doc": "<p>Get the list of cards the opponent has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.seen_cards", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.seen_cards", "kind": "function", "doc": "<p>Get a list of all cards your bot has seen until now</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>leader_move</strong>:  The move made by the leader of the trick. These cards have also been seen until now.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_known_cards_of_opponent_hand", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_known_cards_of_opponent_hand", "kind": "function", "doc": "<p>Get all cards which are in the opponents hand, but known to your Bot. This includes cards earlier used in marriages, or a trump exchange.\nAll cards in the second pahse of the game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_engine", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_engine", "kind": "function", "doc": "<p>Get the GamePlayEngine in use for the current game.\nThis engine can be used to retrieve all information about what kind of game we are playing,\nbut can also be used to simulate alternative game rollouts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.get_state_in_phase_two", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.get_state_in_phase_two", "kind": "function", "doc": "<p>In phase TWO of the game, all information is known, so you can get the complete state</p>\n\n<p>This removes the real bots from the GameState. If you want to continue the game, provide new Bots. See copy_with_other_bots in the GameState class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.PlayerPerspective.make_assumption", "modulename": "schnapsen.game", "qualname": "PlayerPerspective.make_assumption", "kind": "function", "doc": "<p>Takes the current imperfect information state and makes a random guess as to the position of the unknown cards.\nThis also takes into account cards seen earlier during marriages played by the opponent, as well as potential trump jack exchanges</p>\n\n<p>This removes the real bots from the GameState. If you want to continue the game, provide new Bots. See copy_with_other_bots in the GameState class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>leader_move</strong>:  the optional already executed leader_move in the current trick. This card is guaranteed to be in the hand of the leader in the returned GameState.</li>\n<li><strong>rand</strong>:  the source of random numbers to do the random assignment of unknown cards</li>\n</ul>\n\n<p>:returns: A perfect information state object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rand</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">Random</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective", "modulename": "schnapsen.game", "qualname": "LeaderPerspective", "kind": "class", "doc": "<p>The perspective a player has on the state of the game. This only gives access to the partially observable information.\nThe Bot gets passed an instance of this class when it gets requested a move by the GamePlayEngine</p>\n\n<p>This class has several convenience methods to get more information about the current state.</p>\n", "bases": "PlayerPerspective"}, {"fullname": "schnapsen.game.LeaderPerspective.__init__", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span></span>)</span>"}, {"fullname": "schnapsen.game.LeaderPerspective.valid_moves", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.valid_moves", "kind": "function", "doc": "<p>Get a list of all valid moves the bot can play at this point in the game.</p>\n\n<p>Design note: this could also return an Iterable[Move], but list[Move] was chosen to make the API easier to use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective.get_hand", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.get_hand", "kind": "function", "doc": "<p>Get the cards in the hand of the current player</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective.get_my_score", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.get_my_score", "kind": "function", "doc": "<p>Get the socre of the current player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective.get_opponent_score", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.get_opponent_score", "kind": "function", "doc": "<p>Get the socre of the other player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective.get_opponent_hand_in_phase_two", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.get_opponent_hand_in_phase_two", "kind": "function", "doc": "<p>If the game is in the second phase, you can get the cards in the hand of the opponent.\nIf this gets called, but the second pahse has not started yet, this will throw en Exception</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective.am_i_leader", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.am_i_leader", "kind": "function", "doc": "<p>Returns True if the bot is the leader of this trick, False if it is a follower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective.get_won_cards", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.get_won_cards", "kind": "function", "doc": "<p>Get a list of all cards this Bot has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LeaderPerspective.get_opponent_won_cards", "modulename": "schnapsen.game", "qualname": "LeaderPerspective.get_opponent_won_cards", "kind": "function", "doc": "<p>Get the list of cards the opponent has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective", "modulename": "schnapsen.game", "qualname": "FollowerPerspective", "kind": "class", "doc": "<p>The perspective a player has on the state of the game. This only gives access to the partially observable information.\nThe Bot gets passed an instance of this class when it gets requested a move by the GamePlayEngine</p>\n\n<p>This class has several convenience methods to get more information about the current state.</p>\n", "bases": "PlayerPerspective"}, {"fullname": "schnapsen.game.FollowerPerspective.__init__", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">partial_trick</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "schnapsen.game.FollowerPerspective.valid_moves", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.valid_moves", "kind": "function", "doc": "<p>Get a list of all valid moves the bot can play at this point in the game.</p>\n\n<p>Design note: this could also return an Iterable[Move], but list[Move] was chosen to make the API easier to use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective.get_hand", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.get_hand", "kind": "function", "doc": "<p>Get the cards in the hand of the current player</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective.get_my_score", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.get_my_score", "kind": "function", "doc": "<p>Get the socre of the current player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective.get_opponent_score", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.get_opponent_score", "kind": "function", "doc": "<p>Get the socre of the other player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective.get_opponent_hand_in_phase_two", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.get_opponent_hand_in_phase_two", "kind": "function", "doc": "<p>If the game is in the second phase, you can get the cards in the hand of the opponent.\nIf this gets called, but the second pahse has not started yet, this will throw en Exception</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective.am_i_leader", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.am_i_leader", "kind": "function", "doc": "<p>Returns True if the bot is the leader of this trick, False if it is a follower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective.get_won_cards", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.get_won_cards", "kind": "function", "doc": "<p>Get a list of all cards this Bot has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.FollowerPerspective.get_opponent_won_cards", "modulename": "schnapsen.game", "qualname": "FollowerPerspective.get_opponent_won_cards", "kind": "function", "doc": "<p>Get the list of cards the opponent has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective", "kind": "class", "doc": "<p>A special PlayerGameState only used for the history of a game in which a Trump Exchange happened.\nThis state is does not allow any moves.</p>\n", "bases": "PlayerPerspective"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.__init__", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span></span>)</span>"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.valid_moves", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.valid_moves", "kind": "function", "doc": "<p>Get a list of all valid moves the bot can play at this point in the game.</p>\n\n<p>Design note: this could also return an Iterable[Move], but list[Move] was chosen to make the API easier to use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.get_hand", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.get_hand", "kind": "function", "doc": "<p>Get the cards in the hand of the current player</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.get_my_score", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.get_my_score", "kind": "function", "doc": "<p>Get the socre of the current player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.get_opponent_score", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.get_opponent_score", "kind": "function", "doc": "<p>Get the socre of the other player. The return Score object contains both the direct points and pending points from a marriage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.get_trump_suit", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.get_trump_suit", "kind": "function", "doc": "<p>Get the suit of the trump</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.get_opponent_hand_in_phase_two", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.get_opponent_hand_in_phase_two", "kind": "function", "doc": "<p>If the game is in the second phase, you can get the cards in the hand of the opponent.\nIf this gets called, but the second pahse has not started yet, this will throw en Exception</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.get_opponent_won_cards", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.get_opponent_won_cards", "kind": "function", "doc": "<p>Get the list of cards the opponent has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.get_won_cards", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.get_won_cards", "kind": "function", "doc": "<p>Get a list of all cards this Bot has won until now.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">CardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.ExchangeFollowerPerspective.am_i_leader", "modulename": "schnapsen.game", "qualname": "ExchangeFollowerPerspective.am_i_leader", "kind": "function", "doc": "<p>Returns True if the bot is the leader of this trick, False if it is a follower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.WinnerPerspective", "modulename": "schnapsen.game", "qualname": "WinnerPerspective", "kind": "class", "doc": "<p>The gamestate given to the winner of the game at the very end</p>\n", "bases": "LeaderPerspective"}, {"fullname": "schnapsen.game.WinnerPerspective.__init__", "modulename": "schnapsen.game", "qualname": "WinnerPerspective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span></span>)</span>"}, {"fullname": "schnapsen.game.WinnerPerspective.valid_moves", "modulename": "schnapsen.game", "qualname": "WinnerPerspective.valid_moves", "kind": "function", "doc": "<p>Get a list of all valid moves the bot can play at this point in the game.</p>\n\n<p>Design note: this could also return an Iterable[Move], but list[Move] was chosen to make the API easier to use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.LoserPerspective", "modulename": "schnapsen.game", "qualname": "LoserPerspective", "kind": "class", "doc": "<p>The gamestate given to the loser of the game at the very end</p>\n", "bases": "FollowerPerspective"}, {"fullname": "schnapsen.game.LoserPerspective.__init__", "modulename": "schnapsen.game", "qualname": "LoserPerspective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span></span>)</span>"}, {"fullname": "schnapsen.game.LoserPerspective.valid_moves", "modulename": "schnapsen.game", "qualname": "LoserPerspective.valid_moves", "kind": "function", "doc": "<p>Get a list of all valid moves the bot can play at this point in the game.</p>\n\n<p>Design note: this could also return an Iterable[Move], but list[Move] was chosen to make the API easier to use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.DeckGenerator", "modulename": "schnapsen.game", "qualname": "DeckGenerator", "kind": "class", "doc": "<p>A Deckgenerator specifies how what the cards for a game are.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.DeckGenerator.get_initial_deck", "modulename": "schnapsen.game", "qualname": "DeckGenerator.get_initial_deck", "kind": "function", "doc": "<p>Get the intial deck of cards which are used in the game.\nThis method must always return the same set of cards in the same order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">OrderedCardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.DeckGenerator.shuffle_deck", "modulename": "schnapsen.game", "qualname": "DeckGenerator.shuffle_deck", "kind": "function", "doc": "<p>Shuffle the given deck of cards, using the random number generator as a source of randomness.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">deck</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">OrderedCardCollection</span>,</span><span class=\"param\">\t<span class=\"n\">rng</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">Random</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">OrderedCardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenDeckGenerator", "modulename": "schnapsen.game", "qualname": "SchnapsenDeckGenerator", "kind": "class", "doc": "<p>A Deckgenerator specifies how what the cards for a game are.</p>\n", "bases": "DeckGenerator"}, {"fullname": "schnapsen.game.SchnapsenDeckGenerator.__init__", "modulename": "schnapsen.game", "qualname": "SchnapsenDeckGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.game.SchnapsenDeckGenerator.get_initial_deck", "modulename": "schnapsen.game", "qualname": "SchnapsenDeckGenerator.get_initial_deck", "kind": "function", "doc": "<p>Get the intial deck of cards which are used in the game.\nThis method must always return the same set of cards in the same order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">OrderedCardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.HandGenerator", "modulename": "schnapsen.game", "qualname": "HandGenerator", "kind": "class", "doc": "<p>The HandGenerator specifies how the intial set of cards gets divided over the two player's hands and the talon</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.HandGenerator.generateHands", "modulename": "schnapsen.game", "qualname": "HandGenerator.generateHands", "kind": "function", "doc": "<p>Divide the collection of cards over the two hands and the Talon</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cards</strong>:  The cards to be dealt\n:returns: Two hands of cards and the talon. The first hand is for the first player, i.e, the one who will lead the first trick.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cards</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">OrderedCardCollection</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Talon</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenHandGenerator", "modulename": "schnapsen.game", "qualname": "SchnapsenHandGenerator", "kind": "class", "doc": "<p>The HandGenerator specifies how the intial set of cards gets divided over the two player's hands and the talon</p>\n", "bases": "HandGenerator"}, {"fullname": "schnapsen.game.SchnapsenHandGenerator.__init__", "modulename": "schnapsen.game", "qualname": "SchnapsenHandGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.game.SchnapsenHandGenerator.generateHands", "modulename": "schnapsen.game", "qualname": "SchnapsenHandGenerator.generateHands", "kind": "function", "doc": "<p>Divide the collection of cards over the two hands and the Talon</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cards</strong>:  The cards to be dealt\n:returns: Two hands of cards and the talon. The first hand is for the first player, i.e, the one who will lead the first trick.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cards</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">OrderedCardCollection</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Hand</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Talon</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.TrickImplementer", "modulename": "schnapsen.game", "qualname": "TrickImplementer", "kind": "class", "doc": "<p>The TrickImplementer specifies how tricks are palyed in the game.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.TrickImplementer.play_trick", "modulename": "schnapsen.game", "qualname": "TrickImplementer.play_trick", "kind": "function", "doc": "<p>Plays a single Trick the game by asking the bots in the game_state for their Moves,\nusing the MoveRequester from the game_engine.\nThese moves are then also validated using the MoveValidator of the game_engine.\nFinally, the trick is recorder in the history (previous field) of the returned GameState.</p>\n\n<p>Note, the provided GameState does not get modified by this method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_engine</strong>:  The engine used to preform the underlying actions of the Trick.</li>\n<li><strong>game_state</strong>:  The state of the game before the trick is played. Thi state will not be modified.\n:returns: The GameState after the trick is completed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.TrickImplementer.play_trick_with_fixed_leader_move", "modulename": "schnapsen.game", "qualname": "TrickImplementer.play_trick_with_fixed_leader_move", "kind": "function", "doc": "<p>The same as play_trick, but also takes the leader_move to start with as an argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickImplementer", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickImplementer", "kind": "class", "doc": "<p>The TrickImplementer specifies how tricks are palyed in the game.</p>\n", "bases": "TrickImplementer"}, {"fullname": "schnapsen.game.SchnapsenTrickImplementer.__init__", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickImplementer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.game.SchnapsenTrickImplementer.play_trick", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickImplementer.play_trick", "kind": "function", "doc": "<p>Plays a single Trick the game by asking the bots in the game_state for their Moves,\nusing the MoveRequester from the game_engine.\nThese moves are then also validated using the MoveValidator of the game_engine.\nFinally, the trick is recorder in the history (previous field) of the returned GameState.</p>\n\n<p>Note, the provided GameState does not get modified by this method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_engine</strong>:  The engine used to preform the underlying actions of the Trick.</li>\n<li><strong>game_state</strong>:  The state of the game before the trick is played. Thi state will not be modified.\n:returns: The GameState after the trick is completed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickImplementer.play_trick_with_fixed_leader_move", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickImplementer.play_trick_with_fixed_leader_move", "kind": "function", "doc": "<p>The same as play_trick, but also takes the leader_move to start with as an argument.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickImplementer.get_leader_move", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickImplementer.get_leader_move", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickImplementer.play_trump_exchange", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickImplementer.play_trump_exchange", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">trump_exchange</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trump_Exchange</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickImplementer.get_follower_move", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickImplementer.get_follower_move", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">partial_trick</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularMove</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.MoveRequester", "modulename": "schnapsen.game", "qualname": "MoveRequester", "kind": "class", "doc": "<p>An moveRequester captures the logic of requesting a move from a bot.\nThis logic also determines what happens in case the bot is to slow, throws an exception during operation, etc</p>\n"}, {"fullname": "schnapsen.game.MoveRequester.__init__", "modulename": "schnapsen.game", "qualname": "MoveRequester.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.game.MoveRequester.get_move", "modulename": "schnapsen.game", "qualname": "MoveRequester.get_move", "kind": "function", "doc": "<p>Get a move from the bot, potentially applying timeout logic.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SimpleMoveRequester", "modulename": "schnapsen.game", "qualname": "SimpleMoveRequester", "kind": "class", "doc": "<p>The SimplemoveRquester just asks the move, and does nto time out</p>\n", "bases": "MoveRequester"}, {"fullname": "schnapsen.game.SimpleMoveRequester.__init__", "modulename": "schnapsen.game", "qualname": "SimpleMoveRequester.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.game.SimpleMoveRequester.get_move", "modulename": "schnapsen.game", "qualname": "SimpleMoveRequester.get_move", "kind": "function", "doc": "<p>Get a move from the bot, potentially applying timeout logic.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.MoveValidator", "modulename": "schnapsen.game", "qualname": "MoveValidator", "kind": "class", "doc": "<p>An object of this class can be used to check whether a move is valid.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.MoveValidator.get_legal_leader_moves", "modulename": "schnapsen.game", "qualname": "MoveValidator.get_legal_leader_moves", "kind": "function", "doc": "<p>Get all legal moves for the current leader of the game.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_engine</strong>:  The engine which is playing the game</li>\n<li><strong>game_state</strong>:  The current state of the game</li>\n</ul>\n\n<p>:returns: An iterable containing the current legal moves.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.MoveValidator.is_legal_leader_move", "modulename": "schnapsen.game", "qualname": "MoveValidator.is_legal_leader_move", "kind": "function", "doc": "<p>Whether the provided move is legal for the leader to play.\nThe basic implementation checks whether the move is in the legal leader moves.\nDerived classes might implement this more performantly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.MoveValidator.get_legal_follower_moves", "modulename": "schnapsen.game", "qualname": "MoveValidator.get_legal_follower_moves", "kind": "function", "doc": "<p>Get all legal moves for the current follower of the game.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_engine</strong>:  The engine which is playing the game</li>\n<li><strong>game_state</strong>:  The current state of the game</li>\n<li><strong>partial_trick</strong>:  The move played by the leader of the trick.</li>\n</ul>\n\n<p>:returns: An iterable containing the current legal moves.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">partial_trick</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.MoveValidator.is_legal_follower_move", "modulename": "schnapsen.game", "qualname": "MoveValidator.is_legal_follower_move", "kind": "function", "doc": "<p>Whether the provided move is legal for the follower to play.\nThe basic implementation checks whether the move is in the legal fllower moves.\nDerived classes might implement this more performantly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenMoveValidator", "modulename": "schnapsen.game", "qualname": "SchnapsenMoveValidator", "kind": "class", "doc": "<p>An object of this class can be used to check whether a move is valid.</p>\n", "bases": "MoveValidator"}, {"fullname": "schnapsen.game.SchnapsenMoveValidator.__init__", "modulename": "schnapsen.game", "qualname": "SchnapsenMoveValidator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.game.SchnapsenMoveValidator.get_legal_leader_moves", "modulename": "schnapsen.game", "qualname": "SchnapsenMoveValidator.get_legal_leader_moves", "kind": "function", "doc": "<p>Get all legal moves for the current leader of the game.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_engine</strong>:  The engine which is playing the game</li>\n<li><strong>game_state</strong>:  The current state of the game</li>\n</ul>\n\n<p>:returns: An iterable containing the current legal moves.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenMoveValidator.is_legal_leader_move", "modulename": "schnapsen.game", "qualname": "SchnapsenMoveValidator.is_legal_leader_move", "kind": "function", "doc": "<p>Whether the provided move is legal for the leader to play.\nThe basic implementation checks whether the move is in the legal leader moves.\nDerived classes might implement this more performantly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenMoveValidator.get_legal_follower_moves", "modulename": "schnapsen.game", "qualname": "SchnapsenMoveValidator.get_legal_follower_moves", "kind": "function", "doc": "<p>Get all legal moves for the current follower of the game.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_engine</strong>:  The engine which is playing the game</li>\n<li><strong>game_state</strong>:  The current state of the game</li>\n<li><strong>partial_trick</strong>:  The move played by the leader of the trick.</li>\n</ul>\n\n<p>:returns: An iterable containing the current legal moves.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">partial_trick</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.TrickScorer", "modulename": "schnapsen.game", "qualname": "TrickScorer", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "schnapsen.game.TrickScorer.score", "modulename": "schnapsen.game", "qualname": "TrickScorer.score", "kind": "function", "doc": "<p>Score the trick for the given leader and follower. The returned bots are the same bots provided (not copies) and have the score of the trick applied.\nThey are returned in order (new_leader, new_follower). If appropriate, also pending points have been applied.\nThe boolean is True if the leading bot remained the same, i.e., the past leader remains the leader</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">trick</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularTrick</span>,</span><span class=\"param\">\t<span class=\"n\">leader</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">follower</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">trump</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.TrickScorer.declare_winner", "modulename": "schnapsen.game", "qualname": "TrickScorer.declare_winner", "kind": "function", "doc": "<p>return a bot and the number of points if there is a winner of this game already</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_state</strong>:  The current state of the game\n:returns: The botstate of the winner and the number of game points, in case there is a winner already. Otherwise None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.TrickScorer.rank_to_points", "modulename": "schnapsen.game", "qualname": "TrickScorer.rank_to_points", "kind": "function", "doc": "<p>Get the point value for a given rank</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rank</strong>:  the rank of a card for which you want to obtain the points\n:returns: The score for that card</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Rank</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.TrickScorer.marriage", "modulename": "schnapsen.game", "qualname": "TrickScorer.marriage", "kind": "function", "doc": "<p>Get the score which the player obtains for the given marriage</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>move</strong>:  The marriage for which to get the score</li>\n<li><strong>gamestate</strong>:  the current state of the game, usually used to get the trump suit\n:returns: The score for this marriage</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Marriage</span>,</span><span class=\"param\">\t<span class=\"n\">gamestate</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickScorer", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickScorer", "kind": "class", "doc": "<p>A TrickScorer that scores ac cording to the Schnapsen rules</p>\n", "bases": "TrickScorer"}, {"fullname": "schnapsen.game.SchnapsenTrickScorer.__init__", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickScorer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.game.SchnapsenTrickScorer.rank_to_points", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickScorer.rank_to_points", "kind": "function", "doc": "<p>Get the point value for a given rank</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rank</strong>:  the rank of a card for which you want to obtain the points\n:returns: The score for that card</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Rank</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickScorer.marriage", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickScorer.marriage", "kind": "function", "doc": "<p>Get the score which the player obtains for the given marriage</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>move</strong>:  The marriage for which to get the score</li>\n<li><strong>gamestate</strong>:  the current state of the game, usually used to get the trump suit\n:returns: The score for this marriage</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Marriage</span>,</span><span class=\"param\">\t<span class=\"n\">gamestate</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickScorer.score", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickScorer.score", "kind": "function", "doc": "<p>Score the trick for the given leader and follower. The returned bots are the same bots provided (not copies) and have the score of the trick applied.\nThey are returned in order (new_leader, new_follower). If appropriate, also pending points have been applied.\nThe boolean is True if the leading bot remained the same, i.e., the past leader remains the leader</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">trick</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">RegularTrick</span>,</span><span class=\"param\">\t<span class=\"n\">leader</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">follower</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span>,</span><span class=\"param\">\t<span class=\"n\">trump</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Suit</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenTrickScorer.declare_winner", "modulename": "schnapsen.game", "qualname": "SchnapsenTrickScorer.declare_winner", "kind": "function", "doc": "<p>Declaring a winner uses the logic from <a href=\"https://www.pagat.com/marriage/schnaps.html#marriages\">https://www.pagat.com/marriage/schnaps.html#marriages</a> , but simplified, because we do not have closing of the Talon and no need to guess the scores.\nThe following text adapted accordingly from that website.</p>\n\n<p>If a player has 66 or more points, she scores points toward game as follows:</p>\n\n<pre><code>* one game point, if the opponent has made at least 33 points;\n* two game points, if the opponent has made fewer than 33 points, but has won at least one trick (opponent is said to be Schneider);\n* three game points, if the opponent has won no tricks (opponent is said to be Schwarz).\n</code></pre>\n\n<p>If play continued to the very last trick with the talon exhausted, the player who takes the last trick wins the hand, scoring one game point, irrespective of the number of card points the players have taken.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">BotState</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GamePlayEngine", "modulename": "schnapsen.game", "qualname": "GamePlayEngine", "kind": "class", "doc": "<p>The GamePlayengine combines the different aspects of the game into an engine that can execute games.</p>\n"}, {"fullname": "schnapsen.game.GamePlayEngine.__init__", "modulename": "schnapsen.game", "qualname": "GamePlayEngine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">deck_generator</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">DeckGenerator</span>,</span><span class=\"param\">\t<span class=\"n\">hand_generator</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">HandGenerator</span>,</span><span class=\"param\">\t<span class=\"n\">trick_implementer</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">TrickImplementer</span>,</span><span class=\"param\">\t<span class=\"n\">move_requester</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">MoveRequester</span>,</span><span class=\"param\">\t<span class=\"n\">move_validator</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">MoveValidator</span>,</span><span class=\"param\">\t<span class=\"n\">trick_scorer</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">TrickScorer</span></span>)</span>"}, {"fullname": "schnapsen.game.GamePlayEngine.play_game", "modulename": "schnapsen.game", "qualname": "GamePlayEngine.play_game", "kind": "function", "doc": "<p>Play a game between bot1 and bot2, using the rng to create the game.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bot1</strong>:  The first bot playing the game. This bot will be the leader for the first trick.</li>\n<li><strong>bot2</strong>:  The second bot playing the game. This bot will be the follower for the first trick.</li>\n<li><strong>rng</strong>:  The random number generator used to shuffle the deck.</li>\n</ul>\n\n<p>:returns: A tuple with the bot which won the game, the number of points obtained from this game and the score attained.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bot1</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">bot2</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">rng</span><span class=\"p\">:</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">Random</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GamePlayEngine.play_game_from_state_with_new_bots", "modulename": "schnapsen.game", "qualname": "GamePlayEngine.play_game_from_state_with_new_bots", "kind": "function", "doc": "<p>Continue a game  which might have started before with other bots, with new bots.\nThe new bots are new_leader and new_follower.\nThe leader move is an optional paramter which can be provided to force this first move from the leader.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_state</strong>:  The state of the game to start from</li>\n<li><strong>new_leader</strong>:  The bot which will take the leader role in the game.</li>\n<li><strong>new_follower</strong>:  The bot which will take the follower in the game.</li>\n<li><strong>leader_move</strong>:  if provided, the leader will be forced to play this move as its first move.</li>\n</ul>\n\n<p>:returns: A tuple with the bot which won the game, the number of points obtained from this game and the score attained.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">new_leader</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">new_follower</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GamePlayEngine.play_game_from_state", "modulename": "schnapsen.game", "qualname": "GamePlayEngine.play_game_from_state", "kind": "function", "doc": "<p>Continue a game  which might have been started before.\nThe leader move is an optional paramter which can be provided to force this first move from the leader.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_state</strong>:  The state of the game to start from</li>\n<li><strong>leader_move</strong>:  if provided, the leader will be forced to play this move as its first move.</li>\n</ul>\n\n<p>:returns: A tuple with the bot which won the game, the number of points obtained from this game and the score attained.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Score</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.GamePlayEngine.play_at_most_n_tricks", "modulename": "schnapsen.game", "qualname": "GamePlayEngine.play_at_most_n_tricks", "kind": "function", "doc": "<p>Plays up to n tricks (including the one started by the leader, if provided) on a game which might have started before.\nThe number of tricks will be smaller than n in case the game ends before n tricks are played.\nThe new bots are new_leader and new_follower.</p>\n\n<p>This method does not make changes to the provided game_state.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>game_state</strong>:  The state of the game to start from</li>\n<li><strong>new_leader</strong>:  The bot which will take the leader role in the game.</li>\n<li><strong>new_follower</strong>:  The bot which will take the follower in the game.</li>\n</ul>\n\n<p>:returns: The GameState reached and the number of steps actually taken.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">game_state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span>,</span><span class=\"param\">\t<span class=\"n\">new_leader</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">new_follower</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">GameState</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.game.SchnapsenGamePlayEngine", "modulename": "schnapsen.game", "qualname": "SchnapsenGamePlayEngine", "kind": "class", "doc": "<p>A GamePlayEngine configured according to the rules of Schnapsen</p>\n", "bases": "GamePlayEngine"}, {"fullname": "schnapsen.game.SchnapsenGamePlayEngine.__init__", "modulename": "schnapsen.game", "qualname": "SchnapsenGamePlayEngine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.twenty_four_card_schnapsen", "modulename": "schnapsen.twenty_four_card_schnapsen", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.MyDeckGenerator", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "MyDeckGenerator", "kind": "class", "doc": "<p>A Deckgenerator specifies how what the cards for a game are.</p>\n", "bases": "schnapsen.game.DeckGenerator"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.MyDeckGenerator.__init__", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "MyDeckGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.MyDeckGenerator.get_initial_deck", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "MyDeckGenerator.get_initial_deck", "kind": "function", "doc": "<p>Get the intial deck of cards which are used in the game.\nThis method must always return the same set of cards in the same order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">OrderedCardCollection</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.MyTrickScorer", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "MyTrickScorer", "kind": "class", "doc": "<p>A TrickScorer that scores ac cording to the Schnapsen rules</p>\n", "bases": "schnapsen.game.SchnapsenTrickScorer"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.MyTrickScorer.__init__", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "MyTrickScorer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.MyTrickScorer.rank_to_points", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "MyTrickScorer.rank_to_points", "kind": "function", "doc": "<p>Get the point value for a given rank</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rank</strong>:  the rank of a card for which you want to obtain the points\n:returns: The score for that card</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">deck</span><span class=\"o\">.</span><span class=\"n\">Rank</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.TwentyFourSchnapsenGamePlayEngine", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "TwentyFourSchnapsenGamePlayEngine", "kind": "class", "doc": "<p>The GamePlayengine combines the different aspects of the game into an engine that can execute games.</p>\n", "bases": "schnapsen.game.GamePlayEngine"}, {"fullname": "schnapsen.twenty_four_card_schnapsen.TwentyFourSchnapsenGamePlayEngine.__init__", "modulename": "schnapsen.twenty_four_card_schnapsen", "qualname": "TwentyFourSchnapsenGamePlayEngine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "executables", "modulename": "executables", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "executables.cli", "modulename": "executables.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "executables.cli.main", "modulename": "executables.cli", "qualname": "main", "kind": "variable", "doc": "<p>Various Schnapsen Game Examples</p>\n", "default_value": " = &lt;Group main&gt;"}, {"fullname": "executables.cli.play_games_and_return_stats", "modulename": "executables.cli", "qualname": "play_games_and_return_stats", "kind": "function", "doc": "<p>Play number_of_games games between bot1 and bot2, using the SchnapsenGamePlayEngine, and return how often bot1 won.\nPrints progress.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">SchnapsenGamePlayEngine</span>,</span><span class=\"param\">\t<span class=\"n\">bot1</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">bot2</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Bot</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_games</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "executables.cli.NotificationExampleBot", "modulename": "executables.cli", "qualname": "NotificationExampleBot", "kind": "class", "doc": "<p>The Bot baseclass. Derive your own bots from this class and implement the get_move method to use it in games.</p>\n\n<p>Besides the get_move method, it is also possible to override notify_trump_exchange and notify_game_end to get notified when these events happen.</p>\n", "bases": "schnapsen.game.Bot"}, {"fullname": "executables.cli.NotificationExampleBot.__init__", "modulename": "executables.cli", "qualname": "NotificationExampleBot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "executables.cli.NotificationExampleBot.get_move", "modulename": "executables.cli", "qualname": "NotificationExampleBot.get_move", "kind": "function", "doc": "<p>Get the move this Bot wants to play.\nIf this Bot is leading, the leader_move will be None. If this both is following, the leader_move will contain the move the opponent just played</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "executables.cli.NotificationExampleBot.notify_game_end", "modulename": "executables.cli", "qualname": "NotificationExampleBot.notify_game_end", "kind": "function", "doc": "<p>Override this method to get notified about the end of the game.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>won</strong>:  Did this bot win the game?</li>\n<li><strong>state</strong>:  The final state of the game.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">won</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "executables.cli.NotificationExampleBot.notify_trump_exchange", "modulename": "executables.cli", "qualname": "NotificationExampleBot.notify_trump_exchange", "kind": "function", "doc": "<p>Overide this method to get notified about trump exchanges. Note that this only notifies about the other bots exchanges.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>move</strong>:  the Trump Exchange move that was played.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Trump_Exchange</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "executables.cli.HistoryBot", "modulename": "executables.cli", "qualname": "HistoryBot", "kind": "class", "doc": "<p>The Bot baseclass. Derive your own bots from this class and implement the get_move method to use it in games.</p>\n\n<p>Besides the get_move method, it is also possible to override notify_trump_exchange and notify_game_end to get notified when these events happen.</p>\n", "bases": "schnapsen.game.Bot"}, {"fullname": "executables.cli.HistoryBot.__init__", "modulename": "executables.cli", "qualname": "HistoryBot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "executables.cli.HistoryBot.get_move", "modulename": "executables.cli", "qualname": "HistoryBot.get_move", "kind": "function", "doc": "<p>Get the move this Bot wants to play.\nIf this Bot is leading, the leader_move will be None. If this both is following, the leader_move will contain the move the opponent just played</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">PlayerPerspective</span>,</span><span class=\"param\">\t<span class=\"n\">leader_move</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">schnapsen</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">Move</span>:</span></span>", "funcdef": "def"}, {"fullname": "executables.cli.ml", "modulename": "executables.cli", "qualname": "ml", "kind": "variable", "doc": "<p>Commands for the ML bot</p>\n", "default_value": " = &lt;Group ml&gt;"}, {"fullname": "executables.server", "modulename": "executables.server", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "executables.server.main", "modulename": "executables.server", "qualname": "main", "kind": "variable", "doc": "<p>Run the GUI.</p>\n", "default_value": " = &lt;Command main&gt;"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();